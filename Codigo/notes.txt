
icpx -fsycl addv.dp.cpp


***** Plug-in CUDA *****

https://developer.codeplay.com/products/oneapi/nvidia/2024.1.0/guides/get-started-guide-nvidia

O plug-in adiciona um back-end CUDA® ao DPC++

        * Set vars *

                . /opt/intel/oneapi/setvars.sh --include-intel-llvm 

        * Compilação para gpu nvidia *

                icpx -fsycl -fsycl-targets=nvptx64-nvidia-cuda simple-sycl-app.cpp -o simple-sycl-app 

        * Compilaçao para multiplos hardwares *

                icpx -fsycl -fsycl-targets=nvptx64-nvidia-cuda,spir64 \
                -Xsycl-target-backend=nvptx64-nvidia-cuda --offload-arch=sm_80 \
                -o test test.cpp

                icpx: Este é o comando para invocar o compilador DPC++ da Intel.
                -fsycl: Esta é uma opção que indica que o código fornecido é código SYCL.
                -fsycl-targets=nvptx64-nvidia-cuda,spir64: Esta opção especifica os destinos de compilação para o código SYCL.
                nvptx64-nvidia-cuda: Indica que o código será compilado para a arquitetura CUDA da NVIDIA.
                spir64: Indica que o código também será compilado para SPIR-V, que é um formato de código intermediário para execução em dispositivos heterogêneos.
                -Xsycl-target-backend=nvptx64-nvidia-cuda: Esta opção especifica o backend para o código SYCL, que é o mesmo que o destino de compilação para CUDA da NVIDIA.
                --offload-arch=sm_80: Esta opção especifica a arquitetura do dispositivo de destino para o código CUDA. sm_80 é a arquitetura das GPUs NVIDIA da série Ampere, como a RTX 30xx.
                -o test: Esta opção especifica o nome do arquivo de saída do programa compilado, que neste caso será chamado de test.
                test.cpp: Este é o arquivo de código fonte C++ que será compilado

***** Documentation SYCL *****

https://registry.khronos.org/SYCL/specs/sycl-2020/html/sycl-2020.html#subsubsec:nd-range-class